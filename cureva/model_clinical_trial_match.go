/*
Clinical Match API

A simple API to match patients to clinical trials.

API version: 1.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ClinicalTrialMatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClinicalTrialMatch{}

// ClinicalTrialMatch struct for ClinicalTrialMatch
type ClinicalTrialMatch struct {
	// The unique identifier of the clinical trial
	TrialId string `json:"trialId"`
	// The name of the clinical trial
	TrialName string `json:"trialName"`
	Locations []Location `json:"locations"`
	// Detailed description of the clinical trial
	Summary string `json:"summary"`
	// Status about the clinical trial
	Status *string `json:"status,omitempty"`
}

type _ClinicalTrialMatch ClinicalTrialMatch

// NewClinicalTrialMatch instantiates a new ClinicalTrialMatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClinicalTrialMatch(trialId string, trialName string, locations []Location, summary string) *ClinicalTrialMatch {
	this := ClinicalTrialMatch{}
	this.TrialId = trialId
	this.TrialName = trialName
	this.Locations = locations
	this.Summary = summary
	return &this
}

// NewClinicalTrialMatchWithDefaults instantiates a new ClinicalTrialMatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClinicalTrialMatchWithDefaults() *ClinicalTrialMatch {
	this := ClinicalTrialMatch{}
	return &this
}

// GetTrialId returns the TrialId field value
func (o *ClinicalTrialMatch) GetTrialId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TrialId
}

// GetTrialIdOk returns a tuple with the TrialId field value
// and a boolean to check if the value has been set.
func (o *ClinicalTrialMatch) GetTrialIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TrialId, true
}

// SetTrialId sets field value
func (o *ClinicalTrialMatch) SetTrialId(v string) {
	o.TrialId = v
}

// GetTrialName returns the TrialName field value
func (o *ClinicalTrialMatch) GetTrialName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TrialName
}

// GetTrialNameOk returns a tuple with the TrialName field value
// and a boolean to check if the value has been set.
func (o *ClinicalTrialMatch) GetTrialNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TrialName, true
}

// SetTrialName sets field value
func (o *ClinicalTrialMatch) SetTrialName(v string) {
	o.TrialName = v
}

// GetLocations returns the Locations field value
func (o *ClinicalTrialMatch) GetLocations() []Location {
	if o == nil {
		var ret []Location
		return ret
	}

	return o.Locations
}

// GetLocationsOk returns a tuple with the Locations field value
// and a boolean to check if the value has been set.
func (o *ClinicalTrialMatch) GetLocationsOk() ([]Location, bool) {
	if o == nil {
		return nil, false
	}
	return o.Locations, true
}

// SetLocations sets field value
func (o *ClinicalTrialMatch) SetLocations(v []Location) {
	o.Locations = v
}

// GetSummary returns the Summary field value
func (o *ClinicalTrialMatch) GetSummary() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value
// and a boolean to check if the value has been set.
func (o *ClinicalTrialMatch) GetSummaryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Summary, true
}

// SetSummary sets field value
func (o *ClinicalTrialMatch) SetSummary(v string) {
	o.Summary = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ClinicalTrialMatch) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClinicalTrialMatch) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ClinicalTrialMatch) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ClinicalTrialMatch) SetStatus(v string) {
	o.Status = &v
}

func (o ClinicalTrialMatch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClinicalTrialMatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["trialId"] = o.TrialId
	toSerialize["trialName"] = o.TrialName
	toSerialize["locations"] = o.Locations
	toSerialize["summary"] = o.Summary
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

func (o *ClinicalTrialMatch) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"trialId",
		"trialName",
		"locations",
		"summary",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClinicalTrialMatch := _ClinicalTrialMatch{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varClinicalTrialMatch)

	if err != nil {
		return err
	}

	*o = ClinicalTrialMatch(varClinicalTrialMatch)

	return err
}

type NullableClinicalTrialMatch struct {
	value *ClinicalTrialMatch
	isSet bool
}

func (v NullableClinicalTrialMatch) Get() *ClinicalTrialMatch {
	return v.value
}

func (v *NullableClinicalTrialMatch) Set(val *ClinicalTrialMatch) {
	v.value = val
	v.isSet = true
}

func (v NullableClinicalTrialMatch) IsSet() bool {
	return v.isSet
}

func (v *NullableClinicalTrialMatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClinicalTrialMatch(val *ClinicalTrialMatch) *NullableClinicalTrialMatch {
	return &NullableClinicalTrialMatch{value: val, isSet: true}
}

func (v NullableClinicalTrialMatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClinicalTrialMatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


